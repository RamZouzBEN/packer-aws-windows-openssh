---
- name: This playbook is used to install the packages
  hosts: all
  become: true
  become_method: runas
  become_user: Administrator
  tasks:
 
  - name: Install all Patch
    ansible.windows.win_updates:
      category_names:
        - SecurityUpdates
        - CriticalUpdates
        - UpdateRollups
    become: true
    become_method: runas
    become_user: SYSTEM

  - name: Run Microsoft-Windows-Server-Language-Pack_x64_fr-fr.cab
    ansible.windows.win_powershell:
      script: |
        Dism /online /Add-Package /PackagePath="C:\Exploitation\Microsoft-Windows-Server-Language-Pack_x64_fr-fr.cab"
        Dism /Image:"C:\mount\windows" /Get-Packages /format:table

 

  - name: Unzip Sensor agent
    ansible.windows.win_powershell:
      script: |
        set-location c:\exploitation
        $files = Get-ChildItem *.zip 

        foreach ($file in $files)

        { Expand-Archive  -Path $file }

  - name: Disable Firewall
    ansible.windows.win_powershell:
      script: |
        Set-MpPreference -DisableRealtimeMonitoring $true
        Set-MpPreference -DisableScriptScanning $true
        Set-MpPreference -DisableBehaviorMonitoring $true
        Set-MpPreference -DisableIOAVProtection $true
        Set-MpPreference -DisableIntrusionPreventionSystem $true
    

  - name: Install trend scan agent
    ansible.windows.win_powershell:
      script: |
        if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        
        Write-Warning "You are not running as an Administrator. Please try again with admin privileges."
        
        exit 1
        
        }
        
        
        
        $managerUrl="https://workload.de-1.cloudone.trendmicro.com:443/"
        
        
        
        $env:LogPath = "$env:appdata\Trend Micro\Deep Security Agent\installer"
        
        New-Item -path $env:LogPath -type directory
        
        Start-Transcript -path "$env:LogPath\dsa_deploy.log" -append
        
        
        
        echo "$(Get-Date -format T) - DSA download started"
        
        if ( [intptr]::Size -eq 8 ) { 
        
        $sourceUrl=-join($managerUrl, "software/agent/Windows/x86_64/agent.msi") }
        
        else {
        
        $sourceUrl=-join($managerUrl, "software/agent/Windows/i386/agent.msi") }
        
        echo "$(Get-Date -format T) - Download Deep Security Agent Package" $sourceUrl
        
        
        
        $ACTIVATIONURL="dsm://agents.workload.de-1.cloudone.trendmicro.com:443/"
        
        
        
        $WebClient = New-Object System.Net.WebClient
        
        
        
        # Add agent version control info
        
        $WebClient.Headers.Add("Agent-Version-Control", "on")
        
        $WebClient.QueryString.Add("tenantID", "24613")
        
        $WebClient.QueryString.Add("windowsVersion", (Get-CimInstance Win32_OperatingSystem).Version)
        
        $WebClient.QueryString.Add("windowsProductType", (Get-CimInstance Win32_OperatingSystem).ProductType)
        
        $WebClient.QueryString.Add("windowsOperatingSystemSku", (Get-CimInstance Win32_OperatingSystem).OperatingSystemSku)
        
        
        
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
        
        
        
        Try
        
        {
        
            $WebClient.DownloadFile($sourceUrl,  "$env:temp\agent.msi")
        
        } Catch [System.Net.WebException]
        
        {
        
            echo " Please check that your Workload Security Manager TLS certificate is signed by a trusted root certificate authority."
        
            exit 2;
        
        }
        
        
        
        if ( (Get-Item "$env:temp\agent.msi").length -eq 0 ) {
        
            echo "Failed to download the Deep Security Agent. Please check if the package is imported into the Workload Security Manager. "
        
        exit 1
        
        }
        
        echo "$(Get-Date -format T) - Downloaded File Size:" (Get-Item "$env:temp\agent.msi").length
        
        
        
        echo "$(Get-Date -format T) - DSA install started"
        
        echo "$(Get-Date -format T) - Installer Exit Code:" (Start-Process -FilePath msiexec -ArgumentList "/i $env:temp\agent.msi /qn ADDLOCAL=ALL /l*v `"$env:LogPath\dsa_install.log`"" -Wait -PassThru).ExitCode

  - name: Pause for 5 minutes to build app cache
    ansible.builtin.pause:
      minutes: 5


  - name: Install SSM Agent
    ansible.windows.win_powershell:
      script: | 
        $dir = $env:TEMP + "\ssm"
        New-Item -ItemType directory -Path $dir -Force
        cd $dir
        (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe", $dir + "\AmazonSSMAgentSetup.exe")
        Start-Process .\AmazonSSMAgentSetup.exe -ArgumentList @("/q", "/log", "install.log") -Wait
        New-Item -ItemType Directory -Path C:\Script
        # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
        $dlurl = "https://awscli.amazonaws.com/AWSCLIV2.msi"
        $installerPath = Join-Path $env:TEMP (Split-Path $dlurl -Leaf)
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest $dlurl -OutFile $installerPath
        Start-Process -FilePath msiexec -Args "/i $installerPath /passive" -Verb RunAs -Wait
        Remove-Item $installerPath
        $env:Path += ";C:\Program Files\Amazon\AWSCLIV2"

 
  - name: Pause for 5 minutes to build app cache
    ansible.builtin.pause:
      minutes: 5

  - name: Install firefox
    win_chocolatey:
      name: firefox

  - name: Install Visual c++
    win_chocolatey:
      name: vcredist140

  - name: Reboot a machine that takes time to settle after being booted
    ansible.windows.win_reboot:
      post_reboot_delay: 120

  - name: Install Trend Sensor
    ansible.windows.win_powershell:
      script: |
        
        # Require PowerShell 5.0 or later
        
        # Set log path
        $env:LogPath = "$env:appdata\Trend Micro\V1ES"
        New-Item -path $env:LogPath -type directory -Force
        Start-Transcript -path "$env:LogPath\v1es_install.log" -append
        
        
        ## Pre-Check
        # Check authorization
        if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            Write-Host "$(Get-Date -format T) You are not running as an Administrator. Please try again with admin privileges." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        # Check if Invoke-WebRequest is available
        if (-not (Get-Command Invoke-WebRequest -ErrorAction SilentlyContinue)) {
            Write-Host "$(Get-Date -format T) Invoke-WebRequest is not available. Please install PowerShell 3.0 or later." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        # Check if Expand-Archive is available
        if (-not (Get-Command Expand-Archive -ErrorAction SilentlyContinue)) {
            Write-Host "$(Get-Date -format T) Expand-Archive is not available. Please install PowerShell 5.0 or later." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        Write-Host "$(Get-Date -format T) Start deploying." -ForegroundColor White
        
        
        # Proxy_Addr_Port and Proxy_User/Proxy_Password define proxy for software download and Agent activation
        $PROXY_ADDR_PORT="" 
        $PROXY_USERNAME=""
        $PROXY_PASSWORD=""
        
        # Compose proxy URI, credential, and credential object
        $PROXY_URI=""
        $PROXY_CREDENTIAL=""
        $PROXY_CREDENTIAL_OBJ=$null
        if ($PROXY_ADDR_PORT.Length -ne 0) {
            $PROXY_ADDR_PORT=$PROXY_ADDR_PORT.Trim()
            $PROXY_URI="http://$PROXY_ADDR_PORT"
        
            if ($PROXY_USERNAME.Length -ne 0) {
                $PROXY_USERNAME=$PROXY_USERNAME.Trim()
                $PROXY_CREDENTIAL="${PROXY_USERNAME}:"
                $PROXY_CREDENTIAL_OBJ = New-Object System.Management.Automation.PSCredential ($PROXY_USERNAME, (new-object System.Security.SecureString))
        
                if ($PROXY_PASSWORD.Length -ne 0) {
                    $PROXY_PASSWORD=$PROXY_PASSWORD.Trim()
                    $PROXY_CREDENTIAL="${PROXY_USERNAME}:${PROXY_PASSWORD}"
                    $PROXY_CREDENTIAL_OBJ = New-Object System.Management.Automation.PSCredential ($PROXY_USERNAME, (ConvertTo-SecureString -String $PROXY_PASSWORD -AsPlainText -Force))
                }
        
                # Encode proxy credential by base64
                $CREDENTIAL_ENCODE=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($PROXY_CREDENTIAL))
                $PROXY_URI="$CREDENTIAL_ENCODE@$PROXY_ADDR_PORT" # Don't prepend "http://" to the proxy URI
            }
        }
        
        ## Get Package
        $XBC_INSTALLER_PATH = "$env:TEMP\XBC_Installer.zip"
        
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        
        
        
        ## Download XBC installer
        $XBC_FQDN="api-eu1.xbc.trendmicro.com"
        $GET_INSTALLER_URL="https://$XBC_FQDN/apk/installer"
        $HTTP_BODY='{"company_id":"2ef47c88-177c-4686-a878-36a9cb528b56","platform":"win32","scenario_ids":["b7c021b2-0cdf-4d6e-a32c-e870b9b08e92"]}'
        $HTTP_HEADER = @{"X-Customer-Id"="2ef47c88-177c-4686-a878-36a9cb528b56"}
        
        Write-Host "$(Get-Date -format T) Start downloading the installer." -ForegroundColor White
        
        try {
            if ($PROXY_ADDR_PORT.Length -eq 0) {
                $response = Invoke-WebRequest -Uri "$GET_INSTALLER_URL" -Method Post -Body "$HTTP_BODY" -ContentType "application/json" -Headers $HTTP_HEADER -OutFile "$XBC_INSTALLER_PATH"
            }
            elseif ($PROXY_CREDENTIAL.Length -eq 0) {
                $response = Invoke-WebRequest -Uri "$GET_INSTALLER_URL" -Method Post -Body "$HTTP_BODY" -ContentType "application/json" -Proxy "http://$PROXY_ADDR_PORT" -Headers $HTTP_HEADER -OutFile "$XBC_INSTALLER_PATH"
            }
            else {
                $response = Invoke-WebRequest -Uri "$GET_INSTALLER_URL" -Method Post -Body "$HTTP_BODY" -ContentType "application/json" -Proxy "http://$PROXY_ADDR_PORT" -ProxyCredential $PROXY_CREDENTIAL_OBJ -Headers $HTTP_HEADER -OutFile "$XBC_INSTALLER_PATH"
            }
            if ($response.StatusCode -ge 400) {
                Write-Host "$(Get-Date -format T) Failed to download the installer." -ForegroundColor Red
                Stop-Transcript
                exit 1
            }
        } catch {
            Write-Host "$(Get-Date -format T) Failed to download the installer." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        Write-Host "$(Get-Date -format T) The installer was downloaded to $XBC_INSTALLER_PATH." -ForegroundColor White
        
        ## Unzip XBC installer / full package
        $XBC_INSTALLER_DIR = "$env:TEMP\XBC_Installer"
        Write-Host "$(Get-Date -format T) Start unzipping the installer / full package." -ForegroundColor White
        try {
            Expand-Archive -Path $XBC_INSTALLER_PATH -DestinationPath $XBC_INSTALLER_DIR -Force
            Write-Host "$(Get-Date -format T) The installer / full package was unzipped to $XBC_INSTALLER_DIR." -ForegroundColor White
        } catch {
            Write-Host "$(Get-Date -format T) Failed to unzip the installer / full package. Error: $_.Exception.Message." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        ## Install XBC
        $XBC_INSTALLER_EXE = "$XBC_INSTALLER_DIR\EndpointBasecamp.exe"
        
        $ARCH_TYPE = if ([System.Environment]::Is64BitOperatingSystem) { "x86_64" } else { "x86" }
        
        if ( (Get-AuthenticodeSignature "$XBC_INSTALLER_EXE").Status -ne "Valid" ) {
            Write-Host "$(Get-Date -format T) The digital signature of agent is invalid." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        
        
        # Architecture = x86 (0), x64 (9), ARM64 (12)
        $IS_AARCH64 = (Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty Architecture) -eq 12
        $AGENT_TOKEN_WIN64 = "b7c021b2-0cdf-4d6e-a32c-e870b9b08e92"
        $AGENT_TOKEN_WIN32 = "b7c021b2-0cdf-4d6e-a32c-e870b9b08e92"
        $AGENT_TOKEN_AARCH64 = "b7c021b2-0cdf-4d6e-a32c-e870b9b08e92"
        Write-Host "$(Get-Date -format T) Start installing the agent." -ForegroundColor White
        try {
            if ($PROXY_ADDR_PORT.Length -eq 0) {
                $CONNECT_CONFIG = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('{"fps":[{"connections": [{"type": "DIRECT_CONNECT"}]}]}'))
            } else {
                $CONNECT_CONFIG = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('{"fps":[{"connections": [{"type": "USER_INPUT"}]}]}'))
            }
        
        	if ($IS_AARCH64) {
        		$XBC_AGENT_TOKEN = $AGENT_TOKEN_AARCH64
        	}
        	elseif ($ARCH_TYPE -eq "x86_64"){
        		 $XBC_AGENT_TOKEN = $AGENT_TOKEN_WIN64
        	}
        	else {
                $XBC_AGENT_TOKEN = $AGENT_TOKEN_WIN32
            }
        	
            if ($PROXY_URI.Length -ne 0) {
        		$result = & "$XBC_INSTALLER_EXE" /connection $CONNECT_CONFIG /agent_token $XBC_AGENT_TOKEN /is_full_package true /proxy_server_port $PROXY_URI
        	} else {
        		$result = & "$XBC_INSTALLER_EXE" /connection $CONNECT_CONFIG /agent_token $XBC_AGENT_TOKEN /is_full_package true
        	}
            $exitCode = $LASTEXITCODE
        	if ($exitCode -ne 0) {
        		Write-Host "$(Get-Date -format T) Failed to install the agent. Error: $result" -ForegroundColor Red
        		Stop-Transcript
        		exit 1
        	}
            Write-Host "$(Get-Date -format T) The agent is installed." -ForegroundColor White
        } catch {
            Write-Host "$(Get-Date -format T) Failed to install the agent." -ForegroundColor Red
            Stop-Transcript
            exit 1
        }
        
        ## Check XBC registration
        if ($ARCH_TYPE -eq "x86_64") {
            $XBC_REGISTRATION_KEY = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\TrendMicro\TMSecurityService"
        } else {
            $XBC_REGISTRATION_KEY = "HKEY_LOCAL_MACHINE\SOFTWARE\TrendMicro\TMSecurityService"
        }
        $XBC_DEVICE_ID = reg query "$XBC_REGISTRATION_KEY"
        $RETRY_COUNT = 0
        $MAX_RETRY = 30
        while ($XBC_DEVICE_ID.Length -eq 0) {
            $RETRY_COUNT++
            if ($RETRY_COUNT -ge $MAX_RETRY) {
                Write-Host "$(Get-Date -format T) The agent registration failed. Please see the EndpointBasecamp.log for more details." -ForegroundColor Red
                Stop-Transcript
                exit 1
            }
            Write-Host "$(Get-Date -format T) The agent is not registered yet. Please wait 10 seconds." -ForegroundColor White
            Start-Sleep -Seconds 10
            $XBC_DEVICE_ID = reg query "$XBC_REGISTRATION_KEY"
        }
        Write-Host "$(Get-Date -format T) The agent is registered." -ForegroundColor White
        
        Write-Host "$(Get-Date -format T) Finish deploying." -ForegroundColor White
        Stop-Transcript
        exit 0

  - name: Pause for 5 minutes to build app cache
    ansible.builtin.pause:
      minutes: 5

  - name: Configure Trend Sensor
    ansible.windows.win_powershell:
      script: |
        
        start-process -filepath "c:\exploitation\imagesetuptool\ImageSetupTool.exe" -argumentlist  "--non-persistent --no-login --admin-token VrkBq9AaiFQhfvk6bQWJkZta/wEfU3oUpKqSu5IYyLoYmsQm8O/2U8ArTn/XFJV089Mds34sXKMJ2J7WYKJgKg==" -wait


  - name: Disable Domain firewall
    win_firewall:
      state: disabled
      profiles:
      - Domain
      - Private
      - Public
      tags: disable_firewall